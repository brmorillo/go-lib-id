name: Release with Binaries

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Download dependencies
        run: go mod download
        
      - name: Run tests
        run: go test ./... -v -coverprofile=coverage.out
        
      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted properly:"
            gofmt -s -l .
            exit 1
          fi
          
      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  # Build binaries for multiple platforms
  build:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            name: linux-amd64
          - goos: linux
            goarch: arm64
            name: linux-arm64
          - goos: linux
            goarch: 386
            name: linux-386
          # Windows builds
          - goos: windows
            goarch: amd64
            name: windows-amd64
            ext: .exe
          - goos: windows
            goarch: arm64
            name: windows-arm64
            ext: .exe
          - goos: windows
            goarch: 386
            name: windows-386
            ext: .exe
          # macOS builds
          - goos: darwin
            goarch: amd64
            name: macos-amd64
          - goos: darwin
            goarch: arm64
            name: macos-arm64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Get version
        id: version
        run: |
          # For main branch, get version from semantic-release
          VERSION=$(git describe --tags --always 2>/dev/null || echo "v0.0.0")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"
          
      - name: Build basic example
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          BINARY_NAME="go-lib-id-basic-${{ matrix.name }}${{ matrix.ext }}"
          echo "Building ${BINARY_NAME}..."
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o "dist/${BINARY_NAME}" \
            ./examples/basic/
          
      - name: Build capacity demo
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="go-lib-id-capacity-demo-${{ matrix.name }}${{ matrix.ext }}"
          echo "Building ${BINARY_NAME}..."
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o "dist/${BINARY_NAME}" \
            ./examples/capacity-demo/
            
      - name: Create README for binaries
        run: |
          cat > dist/README.md << 'EOF'
          # go-lib-id Binaries
          
          ## Examples Included
          
          - **go-lib-id-basic**: Demonstrates basic usage of the library
          - **go-lib-id-capacity-demo**: Performance testing and capacity demonstration
          
          ## Usage
          
          ### Linux/macOS:
          ```bash
          chmod +x go-lib-id-*
          ./go-lib-id-basic-*
          ./go-lib-id-capacity-demo-*
          ```
          
          ### Windows:
          ```cmd
          go-lib-id-basic-*.exe
          go-lib-id-capacity-demo-*.exe
          ```
          
          ## Library Usage
          
          Add to your Go project:
          ```bash
          go get github.com/brmorillo/go-lib-id
          ```
          
          For documentation visit: https://pkg.go.dev/github.com/brmorillo/go-lib-id
          EOF
            
      - name: Create package
        run: |
          cd dist
          if [ "${{ matrix.goos }}" = "windows" ]; then
            # Create ZIP for Windows
            zip -r "../go-lib-id-${{ steps.version.outputs.version }}-${{ matrix.name }}.zip" .
          else
            # Create TAR.GZ for Unix systems
            tar -czf "../go-lib-id-${{ steps.version.outputs.version }}-${{ matrix.name }}.tar.gz" .
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.name }}
          path: |
            go-lib-id-*.zip
            go-lib-id-*.tar.gz

  # Semantic release for main branch only
  release:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21 \
            @semantic-release/changelog@6 \
            @semantic-release/git@10 \
            @semantic-release/github@9 \
            @semantic-release/exec@6 \
            conventional-changelog-conventionalcommits@6

      - name: Set up Go for release
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.zip" -o -name "*.tar.gz" | while read file; do
            cp "$file" release-assets/
          done
          ls -la release-assets/

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release