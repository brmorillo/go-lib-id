name: Release with Binariesname: Releasename: Release with Binaries



on:

  push:

    branches: [main]on:on:



permissions:  push:  push:

  contents: write

  issues: write    branches: [ main ]    branches: [main]

  pull-requests: write

  pull_request:

jobs:

  test:permissions:    branches: [main]

    runs-on: ubuntu-latest

    steps:  contents: write

      - uses: actions/checkout@v4

        issues: writepermissions:

      - name: Set up Go

        uses: actions/setup-go@v4  pull-requests: write  contents: write

        with:

          go-version: '1.21'  issues: write

          

      - name: Cache Go modulesjobs:  pull-requests: write

        uses: actions/cache@v3

        with:  # Test first

          path: |

            ~/.cache/go-build  test:jobs:

            ~/go/pkg/mod

          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}    runs-on: ubuntu-latest  test:

          restore-keys: |

            ${{ runner.os }}-go-    if: github.event_name == 'push' && github.ref == 'refs/heads/main'    runs-on: ubuntu-latest

            

      - name: Download dependencies    steps:    steps:

        run: go mod download

              - name: Checkout      - uses: actions/checkout@v4

      - name: Run tests

        run: go test ./... -v -coverprofile=coverage.out        uses: actions/checkout@v4      



      - name: Check formatting              - name: Set up Go

        run: |

          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then      - name: Set up Go        uses: actions/setup-go@v4

            echo "Go code is not formatted properly:"

            gofmt -s -l .        uses: actions/setup-go@v4        with:

            exit 1

          fi        with:          go-version: '1.21'

          

      - name: Run linter          go-version: '1.21'          

        uses: golangci/golangci-lint-action@v3

        with:                - name: Cache Go modules

          version: latest

          args: --timeout=5m      - name: Cache Go modules        uses: actions/cache@v3



  # Build binaries for multiple platforms        uses: actions/cache@v3        with:

  build:

    needs: test        with:          path: |

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:          path: ~/go/pkg/mod            ~/.cache/go-build

      matrix:

        include:          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}            ~/go/pkg/mod

          # Linux builds

          - goos: linux          restore-keys: |          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

            goarch: amd64

            name: linux-amd64            ${{ runner.os }}-go-          restore-keys: |

          - goos: linux

            goarch: arm64                        ${{ runner.os }}-go-

            name: linux-arm64

          - goos: linux      - name: Install dependencies            

            goarch: 386

            name: linux-386        run: go mod download      - name: Download dependencies

          # Windows builds

          - goos: windows                run: go mod download

            goarch: amd64

            name: windows-amd64      - name: Run tests        

            ext: .exe

          - goos: windows        run: go test -v -race -coverprofile=coverage.out ./...      - name: Run tests

            goarch: arm64

            name: windows-arm64                run: go test ./... -v -coverprofile=coverage.out

            ext: .exe

          - goos: windows      - name: Check formatting        

            goarch: 386

            name: windows-386        run: |      - name: Check formatting

            ext: .exe

          # macOS builds          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then        run: |

          - goos: darwin

            goarch: amd64            echo "Code is not formatted. Run 'go fmt ./...'"          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then

            name: macos-amd64

          - goos: darwin            gofmt -s -l .            echo "Go code is not formatted properly:"

            goarch: arm64

            name: macos-arm64            exit 1            gofmt -s -l .

    runs-on: ubuntu-latest

    steps:          fi            exit 1

      - name: Checkout

        uses: actions/checkout@v4                    fi

        

      - name: Set up Go      - name: Run linter          

        uses: actions/setup-go@v4

        with:        uses: golangci/golangci-lint-action@v3      - name: Run linter

          go-version: '1.21'

                  with:        uses: golangci/golangci-lint-action@v3

      - name: Get version

        id: version          version: latest        with:

        run: |

          # For main branch, get version from semantic-release          args: --timeout=5m          version: latest

          VERSION=$(git describe --tags --always 2>/dev/null || echo "v0.0.0")

          echo "version=${VERSION}" >> $GITHUB_OUTPUT          args: --timeout=5m

          echo "Building version: ${VERSION}"

            # Version determination - happens before build

      - name: Build basic example

        env:  version:  # Build binaries for multiple platforms

          GOOS: ${{ matrix.goos }}

          GOARCH: ${{ matrix.goarch }}    needs: test  build:

          CGO_ENABLED: 0

        run: |    runs-on: ubuntu-latest    needs: test

          mkdir -p dist

          BINARY_NAME="go-lib-id-basic-${{ matrix.name }}${{ matrix.ext }}"    if: github.event_name == 'push' && github.ref == 'refs/heads/main'    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

          echo "Building ${BINARY_NAME}..."

          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \    outputs:    strategy:

            -o "dist/${BINARY_NAME}" \

            ./cmd/example/      new-release-published: ${{ steps.semantic-check.outputs.new-release-published }}      matrix:

          

      - name: Build capacity demo      new-release-version: ${{ steps.semantic-check.outputs.new-release-version }}        include:

        env:

          GOOS: ${{ matrix.goos }}    steps:          # Linux builds

          GOARCH: ${{ matrix.goarch }}

          CGO_ENABLED: 0      - name: Checkout          - goos: linux

        run: |

          BINARY_NAME="go-lib-id-capacity-demo-${{ matrix.name }}${{ matrix.ext }}"        uses: actions/checkout@v4            goarch: amd64

          echo "Building ${BINARY_NAME}..."

          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \        with:            name: linux-amd64

            -o "dist/${BINARY_NAME}" \

            ./cmd/capacity-demo/          fetch-depth: 0          - goos: linux

            

      - name: Create README for binaries          token: ${{ secrets.GITHUB_TOKEN }}            goarch: arm64

        run: |

          cat > dist/README.md << 'EOF'            name: linux-arm64

          # go-lib-id Binaries

                - name: Set up Node.js          - goos: linux

          ## Examples Included

                  uses: actions/setup-node@v4            goarch: 386

          - **go-lib-id-basic**: Demonstrates basic usage of the library

          - **go-lib-id-capacity-demo**: Performance testing and capacity demonstration        with:            name: linux-386

          

          ## Usage          node-version: '20'          # Windows builds

          

          ### Linux/macOS:                    - goos: windows

          ```bash

          chmod +x go-lib-id-*      - name: Install semantic-release            goarch: amd64

          ./go-lib-id-basic-*

          ./go-lib-id-capacity-demo-*        run: |            name: windows-amd64

          ```

                    npm install -g semantic-release@21 \            ext: .exe

          ### Windows:

          ```cmd            @semantic-release/changelog@6 \          - goos: windows

          go-lib-id-basic-*.exe

          go-lib-id-capacity-demo-*.exe            @semantic-release/git@10 \            goarch: arm64

          ```

                      @semantic-release/github@9 \            name: windows-arm64

          ## Library Usage

                      conventional-changelog-conventionalcommits@6            ext: .exe

          Add to your Go project:

          ```bash          - goos: windows

          go get github.com/brmorillo/go-lib-id

          ```      - name: Check if new release needed            goarch: 386

          

          For documentation visit: https://pkg.go.dev/github.com/brmorillo/go-lib-id        id: semantic-check            name: windows-386

          EOF

                    env:            ext: .exe

      - name: Create package

        run: |          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          # macOS builds

          cd dist

          if [ "${{ matrix.goos }}" = "windows" ]; then        run: |          - goos: darwin

            # Create ZIP for Windows

            zip -r "../go-lib-id-${{ steps.version.outputs.version }}-${{ matrix.name }}.zip" .          # Run semantic-release in dry-run mode to check if new version is needed            goarch: amd64

          else

            # Create TAR.GZ for Unix systems          echo "🔍 Checking if new release is needed..."            name: macos-amd64

            tar -czf "../go-lib-id-${{ steps.version.outputs.version }}-${{ matrix.name }}.tar.gz" .

          fi                    - goos: darwin

          

      - name: Upload artifacts          # Capture semantic-release dry run output            goarch: arm64

        uses: actions/upload-artifact@v4

        with:          semantic-release --dry-run > semantic-dry-run.log 2>&1 || true            name: macos-arm64

          name: binaries-${{ matrix.name }}

          path: |              runs-on: ubuntu-latest

            go-lib-id-*.zip

            go-lib-id-*.tar.gz          # Display the output for debugging    steps:



  # Semantic release for main branch only          echo "=== Semantic Release Dry Run Output ==="      - name: Checkout

  release:

    needs: [test, build]          cat semantic-dry-run.log        uses: actions/checkout@v4

    runs-on: ubuntu-latest

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'          echo "======================================="        

    steps:

      - name: Checkout                - name: Set up Go

        uses: actions/checkout@v4

        with:          # Check if new release would be published        uses: actions/setup-go@v4

          fetch-depth: 0

          token: ${{ secrets.GITHUB_TOKEN }}          if grep -q "The next release version is" semantic-dry-run.log; then        with:



      - name: Set up Node.js            echo "✅ New release will be published"          go-version: '1.21'

        uses: actions/setup-node@v4

        with:            echo "new-release-published=true" >> $GITHUB_OUTPUT          

          node-version: '20'

                            - name: Get version

      - name: Install semantic-release

        run: |            # Extract version        id: version

          npm install -g semantic-release@21 \

            @semantic-release/changelog@6 \            VERSION=$(grep "The next release version is" semantic-dry-run.log | sed 's/.*The next release version is \([0-9\.]*\).*/\1/')        run: |

            @semantic-release/git@10 \

            @semantic-release/github@9 \            echo "new-release-version=$VERSION" >> $GITHUB_OUTPUT          # For main branch, get version from semantic-release

            @semantic-release/exec@6 \

            conventional-changelog-conventionalcommits@6            echo "📦 Version will be: $VERSION"          VERSION=$(git describe --tags --always 2>/dev/null || echo "v0.0.0")



      - name: Set up Go for release          else          echo "version=${VERSION}" >> $GITHUB_OUTPUT

        uses: actions/setup-go@v4

        with:            echo "ℹ️ No new release needed - no significant changes"          echo "Building version: ${VERSION}"

          go-version: '1.21'

                      echo "new-release-published=false" >> $GITHUB_OUTPUT          

      - name: Download all artifacts

        uses: actions/download-artifact@v4          fi      - name: Build basic example

        with:

          path: artifacts        env:



      - name: Prepare release assets  # Build binaries ONLY if there's a new version          GOOS: ${{ matrix.goos }}

        run: |

          mkdir -p release-assets  build:          GOARCH: ${{ matrix.goarch }}

          find artifacts -name "*.zip" -o -name "*.tar.gz" | while read file; do

            cp "$file" release-assets/    needs: version          CGO_ENABLED: 0

          done

          ls -la release-assets/    if: needs.version.outputs.new-release-published == 'true'        run: |



      - name: Run semantic-release    strategy:          mkdir -p dist

        env:

          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}      matrix:          BINARY_NAME="go-lib-id-basic-${{ matrix.name }}${{ matrix.ext }}"

        run: semantic-release
        include:          echo "Building ${BINARY_NAME}..."

          # Linux builds          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \

          - goos: linux            -o "dist/${BINARY_NAME}" \

            goarch: amd64            ./examples/basic/

            name: linux-amd64          

          - goos: linux      - name: Build capacity demo

            goarch: arm64        env:

            name: linux-arm64          GOOS: ${{ matrix.goos }}

          - goos: linux          GOARCH: ${{ matrix.goarch }}

            goarch: 386          CGO_ENABLED: 0

            name: linux-386        run: |

          # Windows builds          BINARY_NAME="go-lib-id-capacity-demo-${{ matrix.name }}${{ matrix.ext }}"

          - goos: windows          echo "Building ${BINARY_NAME}..."

            goarch: amd64          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \

            name: windows-amd64            -o "dist/${BINARY_NAME}" \

            ext: .exe            ./examples/capacity-demo/

          - goos: windows            

            goarch: arm64      - name: Create README for binaries

            name: windows-arm64        run: |

            ext: .exe          cat > dist/README.md << 'EOF'

          - goos: windows          # go-lib-id Binaries

            goarch: 386          

            name: windows-386          ## Examples Included

            ext: .exe          

          # macOS builds          - **go-lib-id-basic**: Demonstrates basic usage of the library

          - goos: darwin          - **go-lib-id-capacity-demo**: Performance testing and capacity demonstration

            goarch: amd64          

            name: macos-amd64          ## Usage

          - goos: darwin          

            goarch: arm64          ### Linux/macOS:

            name: macos-arm64          ```bash

    runs-on: ubuntu-latest          chmod +x go-lib-id-*

    steps:          ./go-lib-id-basic-*

      - name: Checkout          ./go-lib-id-capacity-demo-*

        uses: actions/checkout@v4          ```

                  

      - name: Set up Go          ### Windows:

        uses: actions/setup-go@v4          ```cmd

        with:          go-lib-id-basic-*.exe

          go-version: '1.21'          go-lib-id-capacity-demo-*.exe

                    ```

      - name: Cache Go modules          

        uses: actions/cache@v3          ## Library Usage

        with:          

          path: ~/go/pkg/mod          Add to your Go project:

          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}          ```bash

          restore-keys: |          go get github.com/brmorillo/go-lib-id

            ${{ runner.os }}-go-          ```

                      

      - name: Install dependencies          For documentation visit: https://pkg.go.dev/github.com/brmorillo/go-lib-id

        run: go mod download          EOF

                    

      - name: Set version for build      - name: Create package

        id: build-version        run: |

        run: |          cd dist

          # Use the version determined by semantic-release          if [ "${{ matrix.goos }}" = "windows" ]; then

          VERSION="v${{ needs.version.outputs.new-release-version }}"            # Create ZIP for Windows

          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT            zip -r "../go-lib-id-${{ steps.version.outputs.version }}-${{ matrix.name }}.zip" .

          echo "🏗️ Building version: ${VERSION} for ${{ matrix.goos }}/${{ matrix.goarch }}"          else

                    # Create TAR.GZ for Unix systems

      - name: Build binaries            tar -czf "../go-lib-id-${{ steps.version.outputs.version }}-${{ matrix.name }}.tar.gz" .

        env:          fi

          VERSION: ${{ steps.build-version.outputs.VERSION }}          

          CGO_ENABLED: 0      - name: Upload artifacts

          GOOS: ${{ matrix.goos }}        uses: actions/upload-artifact@v4

          GOARCH: ${{ matrix.goarch }}        with:

        run: |          name: binaries-${{ matrix.name }}

          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }} - Version: ${VERSION}"          path: |

          mkdir -p dist            go-lib-id-*.zip

                      go-lib-id-*.tar.gz

          # Build example binary

          EXAMPLE_BINARY="go-lib-id-example-${{ matrix.name }}${{ matrix.ext }}"  # Semantic release for main branch only

          echo "📦 Building ${EXAMPLE_BINARY}..."  release:

          go build -ldflags="-s -w -X main.version=${VERSION}" \    needs: [test, build]

            -o "dist/${EXAMPLE_BINARY}" \    runs-on: ubuntu-latest

            ./cmd/example/    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

                steps:

          # Build capacity-demo binary        - name: Checkout

          DEMO_BINARY="go-lib-id-capacity-demo-${{ matrix.name }}${{ matrix.ext }}"        uses: actions/checkout@v4

          echo "📦 Building ${DEMO_BINARY}..."        with:

          go build -ldflags="-s -w -X main.version=${VERSION}" \          fetch-depth: 0

            -o "dist/${DEMO_BINARY}" \          token: ${{ secrets.GITHUB_TOKEN }}

            ./cmd/capacity-demo/

                - name: Set up Node.js

          echo "✅ Built binaries:"        uses: actions/setup-node@v4

          ls -la dist/        with:

                    node-version: '20'

      - name: Create README for binaries          

        run: |      - name: Install semantic-release

          cat > dist/README.md << 'EOF'        run: |

          # go-lib-id Binaries v${{ needs.version.outputs.new-release-version }}          npm install -g semantic-release@21 \

                      @semantic-release/changelog@6 \

          ## Examples Included            @semantic-release/git@10 \

                      @semantic-release/github@9 \

          - **go-lib-id-example**: Basic usage demonstration of the library            @semantic-release/exec@6 \

          - **go-lib-id-capacity-demo**: Performance testing and capacity demonstration            conventional-changelog-conventionalcommits@6

          

          ## Usage      - name: Set up Go for release

                  uses: actions/setup-go@v4

          ### Linux/macOS:        with:

          ```bash          go-version: '1.21'

          chmod +x go-lib-id-*          

          ./go-lib-id-example-${{ matrix.name }}      - name: Download all artifacts

          ./go-lib-id-capacity-demo-${{ matrix.name }}        uses: actions/download-artifact@v4

          ```        with:

                    path: artifacts

          ### Windows:

          ```cmd      - name: Prepare release assets

          go-lib-id-example-${{ matrix.name }}.exe        run: |

          go-lib-id-capacity-demo-${{ matrix.name }}.exe          mkdir -p release-assets

          ```          find artifacts -name "*.zip" -o -name "*.tar.gz" | while read file; do

                      cp "$file" release-assets/

          ## Library Usage          done

                    ls -la release-assets/

          Add to your Go project:

          ```bash      - name: Run semantic-release

          go get github.com/brmorillo/go-lib-id@v${{ needs.version.outputs.new-release-version }}        env:

          ```          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

                  run: semantic-release
          For documentation visit: https://pkg.go.dev/github.com/brmorillo/go-lib-id
          EOF
          
      - name: Create archive
        run: |
          cd dist
          # Create appropriate archive based on OS
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            # ZIP for Windows
            zip -r ../go-lib-id-${{ matrix.name }}.zip . 
            echo "📦 Created Windows ZIP archive"
          else
            # TAR.GZ for Unix systems
            tar -czf ../go-lib-id-${{ matrix.name }}.tar.gz .
            echo "📦 Created Unix TAR.GZ archive"
          fi
          cd ..
          
          echo "✅ Created archive:"
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            ls -la *.zip
          else
            ls -la *.tar.gz
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.name }}
          path: |
            *.zip
            *.tar.gz

  # Final release step - publish with binaries (ONLY after builds complete)
  publish-release:
    needs: [version, build]
    runs-on: ubuntu-latest
    if: needs.version.outputs.new-release-published == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21 \
            @semantic-release/changelog@6 \
            @semantic-release/git@10 \
            @semantic-release/github@9 \
            conventional-changelog-conventionalcommits@6

      - name: Set up Go for release
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          echo "🎯 Preparing release assets..."
          mkdir -p release-assets
          
          # Copy all archives to release assets
          find artifacts -name "*.zip" -o -name "*.tar.gz" | while read file; do
            filename=$(basename "$file")
            cp "$file" "release-assets/$filename"
            echo "📦 Added: $filename"
          done
          
          echo "✅ Release assets ready:"
          ls -la release-assets/

      - name: Run semantic-release (FINAL STEP)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Publishing release v${{ needs.version.outputs.new-release-version }}..."
          semantic-release
          echo "✅ Release published successfully!"