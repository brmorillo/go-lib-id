package main

import (
	"fmt"
	"time"

	"github.com/brmorillo/go-lib-id/pkg/idgen"
)

func main() {
	fmt.Println("üÜî go-lib-id - Snowflake ID Generator Demo")
	fmt.Println("==========================================")
	fmt.Println()

	// 1. Create generator with specific ProcessID and WorkerID
	fmt.Println("1Ô∏è‚É£  Creating Snowflake generator")
	fmt.Println("   Process ID: 5 (simulates server process)")
	fmt.Println("   Worker ID: 12 (simulates specific thread/worker)")

	generator, err := idgen.New(5, 12)
	if err != nil {
		panic(err)
	}

	// 2. Generate individual IDs
	fmt.Println("\n2Ô∏è‚É£  Generating individual IDs:")
	for i := 0; i < 5; i++ {
		id := generator.Generate()
		fmt.Printf("   ID %d: %d\n", i+1, id)

		// Small delay to show timestamp increment
		if i < 4 {
			time.Sleep(2 * time.Millisecond)
		}
	}

	// 3. Extract components from an ID (Discord/Twitter Snowflake format)
	fmt.Println("\n3Ô∏è‚É£  Extracting components from an ID:")
	id := generator.Generate()
	fmt.Printf("   Complete ID: %d\n", id)
	fmt.Printf("   Timestamp: %d ms\n", generator.ExtractTimestamp(id))
	fmt.Printf("   Time: %v\n", generator.ExtractTime(id))
	fmt.Printf("   Process ID: %d\n", generator.ExtractProcessID(id))
	fmt.Printf("   Worker ID: %d\n", generator.ExtractWorkerID(id))
	fmt.Printf("   Sequence: %d\n", generator.ExtractSequence(id))

	// 4. Generate batch of IDs
	fmt.Println("\n4Ô∏è‚É£  Generating batch of IDs:")
	batch := generator.GenerateBatch(10)
	fmt.Printf("   Generated %d IDs in batch\n", len(batch))
	fmt.Printf("   First: %d\n", batch[0])
	fmt.Printf("   Last: %d\n", batch[len(batch)-1])

	// 5. Use global API
	fmt.Println("\n5Ô∏è‚É£  Using global API:")
	fmt.Println("   Setting Process ID: 10, Worker ID: 20")
	err = idgen.SetDefaultMachineID(10, 20)
	if err != nil {
		panic(err)
	}

	globalID1 := idgen.GenerateSnowflake()
	globalID2 := idgen.GenerateSnowflake()
	fmt.Printf("   Global ID 1: %d\n", globalID1)
	fmt.Printf("   Global ID 2: %d\n", globalID2)

	// 6. Simulating distributed system with multiple processes and workers
	fmt.Println("\n6Ô∏è‚É£  Simulating distributed system:")
	fmt.Println("   3 processes √ó 2 workers each = 6 unique generators")

	machines := []struct {
		processID int64
		workerID  int64
	}{
		{0, 0}, // Process 0, Worker 0
		{0, 1}, // Process 0, Worker 1
		{1, 0}, // Process 1, Worker 0
	}

	fmt.Println("\n   IDs generated by each process/worker combination:")
	for _, m := range machines {
		gen, _ := idgen.New(m.processID, m.workerID)
		machineID := gen.Generate()
		extractedPID := gen.ExtractProcessID(machineID)
		extractedWID := gen.ExtractWorkerID(machineID)
		fmt.Printf("   Process %d Worker %d: %d (extracted: P=%d W=%d)\n",
			m.processID, m.workerID, machineID, extractedPID, extractedWID)
	}

	// 7. Performance test
	fmt.Println("\n7Ô∏è‚É£  Performance test:")
	perfGen, _ := idgen.New(15, 25)

	start := time.Now()
	count := 100_000
	for i := 0; i < count; i++ {
		perfGen.Generate()
	}
	duration := time.Since(start)

	idsPerSecond := float64(count) / duration.Seconds()
	fmt.Printf("   Generated %d IDs in %v\n", count, duration)
	fmt.Printf("   Performance: %.0f IDs/second\n", idsPerSecond)

	// 8. Checking uniqueness
	fmt.Println("\n8Ô∏è‚É£  Checking uniqueness (10,000 IDs):")
	uniqueTest, _ := idgen.New(7, 14)
	testCount := 10_000

	idSet := make(map[int64]bool)
	for i := 0; i < testCount; i++ {
		idSet[uniqueTest.Generate()] = true
	}

	fmt.Printf("   IDs generated: %d\n", testCount)
	fmt.Printf("   Unique IDs: %d\n", len(idSet))
	fmt.Printf("   Duplicates: %d\n", testCount-len(idSet))

	if len(idSet) == testCount {
		fmt.Println("   ‚úÖ All IDs are unique!")
	} else {
		fmt.Println("   ‚ùå Duplicates found!")
	}

	fmt.Println("\n‚ú® Demo completed!")
	fmt.Println("\nüìä Snowflake ID Structure (Discord/Twitter):")
	fmt.Println("   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
	fmt.Println("   ‚îÇ Sign    ‚îÇ  Timestamp   ‚îÇ Process ID ‚îÇ Worker ID ‚îÇ Sequence ‚îÇ")
	fmt.Println("   ‚îÇ 1 bit   ‚îÇ   41 bits    ‚îÇ   5 bits   ‚îÇ  5 bits   ‚îÇ 12 bits  ‚îÇ")
	fmt.Println("   ‚îÇ (0)     ‚îÇ              ‚îÇ  (0-31)    ‚îÇ  (0-31)   ‚îÇ (0-4095) ‚îÇ")
	fmt.Println("   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
	fmt.Println("   Capacity: 32 processes √ó 32 workers √ó 4096 IDs/ms")
	fmt.Println("   = ~4.1 million IDs per millisecond")
}
